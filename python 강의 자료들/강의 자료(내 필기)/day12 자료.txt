exam.py


# < Comprehension >
# Comprehension은 리스트, 사전, 집합 등에서 활용
# - 파이썬에서 매우 자주 사용되는 문법 중 하나
# - 반복 가능한 객체(iterable object)의 각 항목에 대해 표현식을 평가하여
#   새로운 리스트, 사전, 집합을 간단하고 읽기 쉽게 생성하는 방법
# - 특정 유형의 반복문을 단순화하고 최적화하여 코드를 간단하게 만들고 가독성을 높임
# - 다양한 컬렉션 타입을 간단하게 생성할 수 있도록 도와줌
# - 파이썬을 사용할 때는 컴프리헨션을 적극적으로 활용하는 것이 좋음
# - 표현 방식
#       리스트(list) : 대괄호 [ ]
#       사전(dict) : 중괄호 { }
#       집합(set) : 소괄호 ( )
# 리스트 Comprehension
numbers = [1, 2, 3, 4, 5]
squared_numbers = [n**2 for n in numbers]
print(squared_numbers) # Output: [1, 4, 9, 16, 25] 

# 사전 Comprehension
word = "Hello"
word_dict = {char: word.count(char) for char in word} 
print(word_dict) # Output: {'H': 1, 'e': 1, 'l': 2, 'o': 1} 

# 집합 Comprehension
numbers = [1, 2, 3, 2, 1]
unique_numbers = {n for n in numbers}
print(unique_numbers) # Output: {1, 2, 3}



# 1) List Comprehension(리스트 컴프리헨션)
#   형식: [표현식 for 항목 in iterable if 조건문]
#     표현식: 각 항목에서 계산되어 리스트의 요소가 될 값
#     항목: iterable 객체의 각 요소를 차례대로 지정하는 변수
#     조건문: 항목이 조건문을 만족할 때만 표현식이 계산되어 리스트의 요소가 됨(생략 가능) 
# 예시)
# 1부터 5까지의 숫자를 담은 리스트를 생성하는 방법
numbers = [num for num in range(1,6)]
print(numbers)  # 출력: [1, 2, 3, 4, 5]

# 리스트를 생성하면서 조건문을 함께 사용하는 방법
evens = [num for num in range(1, 11) if num % 2 == 0]
print(evens)  # 출력: [2, 4, 6, 8, 10]

"""
if - else 조건문이 for문 앞에 위치한다. 
형식: [ 출력값1 if 조건식 else 출력값2 for 항목 in iterable ]
"""

# 2) Dictionary Comprehension(딕셔너리 컴프리헨션)
#   형식: {키: 값 for 항목 in iterable if 조건문}
#     항목: iterable 객체의 각 요소를 차례대로 지정하는 변수
#     조건문: 항목이 조건문을 만족할 때만 표현식이 계산되어 딕셔너리의 요소가 됨(생략 가능) 
#     키: 딕셔너리의 키(key)가 되는 값
#     값: 딕셔너리의 값(value)이 되는 값
# 예시)
# 1부터 5까지의 숫자를 키로 하고, 각 숫자의 제곱을 값으로 갖는 딕셔너리를 생성하는 방법
squares = {num: num ** 2 for num in range(1, 6)}
print(squares)  # 출력: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

# 딕셔너리를 생성하면서 조건문을 함께 사용하는 방법
even_squares = {num: num ** 2 for num in range(1, 11) if num % 2 == 0}
print(even_squares)  # 출력: {2: 4, 4: 16, 6: 36, 8: 64, 10: 100}


# 3) Set Comprehension(집합 컴프리헨션)
#   형식: {표현식 for 항목 in iterable if 조건문}
#     표현식: 각 항목에서 계산되어 집합의 요소가 될 값
#     항목: iterable 객체의 각 요소를 차례대로 지정하는 변수
#     조건문: 항목이 조건문을 만족할 때만 표현식이 계산되어 집합의 요소가 됨(생략 가능)
# 리스트와 동일하지만 중복 값이 제거된 집합을 생성
# 예시)
# 1부터 5까지의 숫자를 담은 집합을 생성하는 방법
list = [1, 2, 3, 4, 5, 6, 1, 2, 2, 3, 4]
numbers = {num for num in list}
print(numbers)  # 출력: {1, 2, 3, 4, 5, 6}

# 집합을 생성하면서 조건문을 함께 사용하는 방법
odds = {num for num in range(1, 11) if num % 2 == 1}
print(odds)  # 출력: {1, 3, 5, 7, 9}








exam02.py


# < 튜플 컴플리헨션 제너레이터 표현식>
# - 파이썬에서는 튜플 컴프리헨션(tuple comprehension)을 지원하지 않음
# - 튜플은 불변(immutable)하기 때문에 컴프리헨션을 통해 값을 생성할 수 없음
# - 하지만 제너레이터 표현식(generator expression)을 사용하면 튜플 생성 가능
# - 제너레이터 표현식은 컴프리헨션과 비슷하지만, 괄호()를 사용하여 생성하며,
#   값을 미리 생성하지 않고 필요할 때마다 생성

# 제너레이터 컴프리헨션
#  형식: (표현식 for 항목 in iterable if 조건문)
#    표현식: 각 항목에서 계산되어 튜플의 요소가 될 값
#    항목: iterable 객체의 각 요소를 차례대로 지정하는 변수
#    조건문: 항목이 조건문을 만족할 때만 표현식이 계산되어 튜플의 요소가 됨(생략 가능)
# 결과 값이 제네레이터를 생성


# 예시 1) 제너레이터 표현식으로 튜플 생성하기
t = tuple(x for x in range(1, 6))
print(t)  # 출력: (1, 2, 3, 4, 5)

# range() 함수로 1부터 5까지의 숫자를 생성하고, 
# 이를 제너레이터 표현식을 사용하여 튜플로 생성
# 이때 tuple() 함수를 사용하여 제너레이터 표현식을 튜플로 변환

# 예시 2) 제너레이터 컴프리헨션
squares_gen = (num ** 2 for num in range(1, 6))
print(squares_gen)  # 출력: <generator object <genexpr> at 0x7f37f8b32e40>
print(list(squares_gen))  # 출력: [1, 4, 9, 16, 25]

# squares_gen 변수에는 
# <generator object <genexpr> at 0x7f37f8b32e40>과 같은 제너레이터 객체가 생성됨
# list(), tuple(), set() 등의 함수를 사용하여 제너레이터에서 값을 하나씩 꺼내 사용할 자료로 변환. 





exam03.py


"""
컴프리헨션은 파이썬의 특징 중 하나!
코드를 간결하게 작성할 수 있으며 가독성을 높일 수 있음.
중첩된 컴프리헨션은 오히려 가독성이 떨어지기 때문에 중첩이 필요한 경우 별도의 변수를 사용하는 것을 권장.
컴프리헨션에서는 일반적으로 한 줄에 들어갈 정도로 간단한 표현식을 사용!!
"""

# < 중첩된 리스트 컴프리헨션 >
# 중첩된 리스트 컴프리헨션을 사용하여 2차원 리스트를 생성하는 코드
matrix = [[row * 3 + col for col in range(3)] for row in range(3)]
print(matrix)  # 출력: [[0, 1, 2], [3, 4, 5], [6, 7, 8]]




# < 컴프리핸션에 람다 함수 활용 >
# 람다 함수 정의
power = 3
power_function = lambda x: x ** power

# 리스트 컴프리헨션을 사용하여 세제곱수 생성
cubes = [power_function(num) for num in range(1, 11)]
print("Cubes:", cubes)

# 리스트 컴프리헨션을 사용하여 람다 함수 리스트 생성
list = [lambda x: x*2 for x in range(1, 5)]
print(list[0](2))
print(list[1](4))
print(list[2](6))
print(list[3](8))






실습.py



# # Comprehension (day12자료(강사님) quiz 파일)

# # Q1. 리스트 컴프리헨션을 사용하여 1 ~ 100 사이의 홀수 숫자 리스트 생성
# odd_numbers = [num for num in range(1, 101) if num % 2 == 1]
# print(odd_numbers)

# # Q2. 집합(set) 컴프리헨션을 사용하여 1 ~ 10까지의 제곱수 집합(set) 생성
# squares = {num**2 for num in range(1,11)}
# print(squares)

# # Q3. 딕셔너리 컴프리헨션을 사용하여 15 ~ 25 사이의 숫자와 제곱수 쌍의 딕셔너리 생성
# number_square_pairs = {num: num ** 2 for num in range(15, 26)}
# print(number_square_pairs)

# # Q4. 리스트 [1, 2, 3, 2, 4, 2, 5]에서 index()함수를 활용하여 값 2의 모든 인덱스를 리스트로 생성
# li = [1, 2, 3, 2, 4, 2, 5]
# indices = [num for num in range(len(li)) if li[num] == 2]
# print(indices)







# File Input/Output

# Q1. 다음과 같이 동작하도록 작성하세요.
# file_name = input("저장할 파일명: ")
# name = input("이름: ")
# age = int(input("나이: "))
# file = open(f"{file_name}", "w", encoding = "utf-8")
# file.write(f"이름: {name}\n나이: {age}")
# file.close()
# print("저장되었습니다.")
# print()

# Q1-1. 
# file_name2 = input("불러올 파일명: ")
# f = open(f"{file_name2}", "r", encoding = "utf-8")
# print(f.read())
# f.close()
# print("모두 읽었습니다.")
# print()





# # Q2. "샘플문서.txt" 파일을 이용하여 다음 정보를 파악하시오.

# # 1) 전체 글자 개수(공백 제외)
# f = open("샘플문서.txt", "r")
# st = f.read()

# total_str = len(st.replace(" ",""))
# print(f"전체 글자 개수(공백 제외): {total_str}")
# f.close()
# print()


# # 2) 각 알파벳 개수(대소문자 구분X)
# f = open("샘플문서.txt", "r")
# st = f.read()

# count_alpa = []
# su = 65
# su2 = 97
# print("각 알파벳 개수")
# for i in range(26):
#     print(f"{chr(su2)} : {st.count(chr(su)) + st.count(chr(su2))}개")
#     count_alpa.append([chr(su2), st.count(chr(su)) + st.count(chr(su2))])
#     su += 1
#     su2 += 1

# most_alpa = sorted(count_alpa, key = lambda x: x[1], reverse = True)  
# f.close()
# print()


# # 3) 단어의 개수
# f = open("샘플문서.txt", "r")
# st = f.read()

# words = st.split()
# cnt_word = len(words)
# print(f"단어의 개수: {cnt_word}")

# li2 = []
# for i in set(words):
#     li2.append([i, words.count(i)])

# most_words = sorted(li2, key = lambda x: x[1], reverse = True)
# f.close()
# print()


# # 4) 각 특수문자 개수(공백 제외)
# f = open("샘플문서.txt", "r")
# st = f.read()

# li = []
# for i in st.replace(" ",""):
#     if 65 <= ord(i) <= 90:
#         continue
#     elif 97 <= ord(i) <= 122:
#         continue
#     elif i.isnumeric():
#         continue
#     else:
#         li.append(i)

# use = []
# for i in set(li):
#     use.append([i, li.count(i)])

# print(f"각 특수문자 개수: {use}")
# most_special = sorted(use, key = lambda x: x[1], reverse = True)
# f.close()
# print()

# # 다음 내용을 "결과.txt" 파일에 출력
# f= open("결과.txt", "w", encoding= "utf-8")

# f.write(f"가장 많이 사용된 알파벳은? {most_alpa[0][0]}\n")
# f.write(f"가장 많이 사용된 단어는? {most_words[0][0]}\n")
# f.write(f"가장 많이 사용된 특수문자는? {most_special[0][0]}\n")
# f.close()











# # Q2-2. 함수 사용
# # 1) 전체 글자 개수(공백 제외)
# f = open("샘플문서.txt", "r")
# st = f.read()

# total_str = len(st.replace(" ",""))
# print(f"전체 글자 개수(공백 제외): {total_str}")
# f.close()
# print()


# # 2) 각 알파벳 개수(대소문자 구분X)
# f = open("샘플문서.txt", "r")
# st = f.read()

# print("각 알파벳 개수")

# def cnt_alpa(n):
#     count_alpa = []
#     su = 65 + n
#     su2 = 97 + n
#     print(f"{chr(su2)} : {st.count(chr(su)) + st.count(chr(su2))}개")
#     count_alpa.append([chr(su2), st.count(chr(su)) + st.count(chr(su2))])
#     return count_alpa

# total_alpa = []

# for i in range(26):
#     total_alpa += cnt_alpa(i)

# most_alpa = sorted(total_alpa, key = lambda x: x[1], reverse = True)  
# f.close()
# print()


# # 3) 단어의 개수
# f = open("샘플문서.txt", "r")
# st = f.read()

# words = st.split()
# cnt_word = len(words)
# print(f"단어의 개수: {cnt_word}")

# li2 = []
# for i in set(words):
#     li2.append([i, words.count(i)])

# most_words = sorted(li2, key = lambda x: x[1], reverse = True)
# f.close()
# print()


# # # 4) 각 특수문자 개수(공백 제외)
# f = open("샘플문서.txt", "r")
# st = f.read()

# def choice_special(n):
#     li2 = []
#     if 65 <= ord(n) <= 90:
#         pass
#     elif 97 <= ord(n) <= 122:
#         pass
#     elif n.isnumeric():
#         pass
#     else:
#         li2.append(n)
#     return li2

# use_spe = []
# for i in st.replace(" ",""):
#     use_spe += choice_special(i)

# uses = []
# for i in set(use_spe):
#     uses.append([i, use_spe.count(i)]) 
# print(f"각 특수문자 사용 개수: {uses}")

# most_special = sorted(uses, key = lambda x: x[1], reverse=True)
# f.close()
# print()

# # 다음 내용을 "결과.txt" 파일에 출력
# f= open("결과.txt", "w", encoding= "utf-8")

# f.write(f"가장 많이 사용된 알파벳은? {most_alpa[0][0]}\n")
# f.write(f"가장 많이 사용된 단어는? {most_words[0][0]}\n")
# f.write(f"가장 많이 사용된 특수문자는? {most_special[0][0]}\n")
# f.close()
