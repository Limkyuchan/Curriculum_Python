exam.py



# 파이썬에서 SQLite3 연동
"""
< SQLite3 모듈 >
1) 접속 관련 함수
- connect(): SQLite 데이터베이스에 연결
  ex) conn = sqlite3.connect("example.db")
- cursor(): 데이터베이스와 상호작용. cursor 객체는 SQL쿼리를 실행하고, 결과를 가져옴
  ex) cursor = conn.cursor()
- close(): 데이터베이스 연결을 닫음. cursor 객체와 데이터베이스 연결 객체 모두 호출 필요.
  ex) cursor.close()    conn.close()

  
2) 쿼리 전송 관련 함수
- execute(): 지정된 SQL쿼리를 실행
  ex) cursor.execute("SELECT * FROM users WHERE name=?", ('John',))
- executemany(): 같은 SQL 쿼리를 반복적으로 실행
  ex) data = [('John', 30), ('Jane',25)] 
      cursor.executemany("INSERT INTO users (name, age) VALUES(?,?)", data)


3) 쿼리 결과 관련 함수 (select 쿼리 결과를 이용할 때 사용)
- fetchone(): 결과 세트에서 다음 행(row)을 반환
  ex) row = cursor.fetchone()
- fetchmany(): 결과 세트에서 다음 여러개의 행을 가져옴. size 파라미터를 지정하지 않으면
               기본값으로 cursor.arraysize를 사용(default: 1)
               cursor.arraysize = 100 과 같이 변경 가능.
  ex) rows = cursor.fetchmany(5)
- fetchall(): 결과 세트에서 모든 행을 가져옴
  ex) rows = cursor.fetchall()


4) 트랜젝션 관련 함수 (자동 커밋 모드로 동작. 수동으로 begin을 전송하여 직접 트랜젝션 제어 가능)
- commit(): 데이터베이스에 변경 사항을 영구적으로 적용하기 위해서는 반드시 이 함수를 호출.
  ex) conn.commit()
- rollback(): 이전 커밋 시점으로 데이터베이스를 되돌림.
              이 함수를 호출하면, 이전 커밋 이후에 변경된 데이터는 모두 삭제됨.
  ex) conn.rollback()

"""








실습.py


# 파이썬에서 SQLite3 연동

# # 실습 1. Table users 생성
# import sqlite3

# # 데이터베이스 연결 (connect())
# conn = sqlite3.connect("파이썬/Day20/example.db")

# # 커서 생성(cursor())
# cursor = conn.cursor()

# # users 테이블 생성
# cursor.execute("""
#     CREATE TABLE IF NOT EXISTS users (
#         id INTEGER PRIMARY KEY AUTOINCREMENT,
#         name TEXT NOT NULL,
#         age INTEGER NOT NULL
#     )    
# """)

# # 커밋
# conn.commit()

# # 커서와 연결 닫기
# cursor.close()
# conn.close()



# # 실습 2. execute() 함수
# import sqlite3

# conn = sqlite3.connect("파이썬/Day20/example.db")   # 데이터베이스 연결
# cursor = conn.cursor()      # 커서 생성

# try:
#     # 데이터 삽입
#     cursor.execute("INSERT INTO users (name, age) VALUES (?, ?)", ('Alice', 20))
#     cursor.execute("INSERT INTO users (name, age) VALUES (?, ?)", ('Bob', 25))
#     cursor.execute("INSERT INTO users (name, age) VALUES (?, ?)", ('Charlie', 30))
#     conn.commit()         # 커밋
# except Exception as e:
#     conn.rollback()       # 롤백
#     print(e)
# finally:
#     cursor.close()
#     conn.close()



# # 실습 3. executemany() 함수
# import sqlite3

# conn = sqlite3.connect("파이썬/Day20/example.db")
# cursor = conn.cursor()

# # 데이터 삽입을 위한 파라미터 세트
# data = [('John', 30), ('Jane', 25), ('Mike', 40)]

# try:
#     # executemany() 메서드를 사용하여 여러 개의 데이터 삽입
#     cursor.executemany("INSERT INTO users (name, age) VALUES (?, ?)", data)
#     conn.commit()           
# except Exception as e:
#     conn.rollback()
#     print(e)
# finally:
#     cursor.close()
#     conn.close()



# # 실습 4. fetchone()함수
# import sqlite3

# conn = sqlite3.connect("파이썬/Day20/example.db")
# cursor = conn.cursor()

# try:
#     # users 테이블에서 한 행 가져오기
#     cursor.execute("SELECT * FROM users")
#     row = cursor.fetchone()

#     # 결과 출력
#     if row:
#         print(row)
#     else:
#         print("No data")
# except Exception as e:
#     print(e)
# finally:
#     cursor.close()
#     conn.close()



# # 실습 5. fetchmany() 함수
# import sqlite3

# conn = sqlite3.connect("파이썬/Day20/example.db")
# cursor = conn.cursor()

# try:
#     cursor.execute("SELECT * FROM users")
#     rows = cursor.fetchmany(2)

#     # 결과 출력
#     for row in rows:
#         print(row)
# except Exception as e:
#     print(e)
# finally:
#     cursor.close()
#     conn.close()
    


# # 실습 6. fetchall() 함수
# import sqlite3

# conn = sqlite3.connect("파이썬/Day20/example.db")
# cursor = conn.cursor()

# try:
#     cursor.execute("SELECT * FROM users")
#     rows = cursor.fetchall()

#     for row in rows:
#         print(row)
# except Exception as e:
#     print(e)
# finally:
#     cursor.close()
#     conn.close()



# # 실습 7. def 함수 적용
# import sqlite3

# # 데이터베이스 연결
# conn = sqlite3.connect("파이썬/Day20/example.db")

# # cursor 생성
# cursor = conn.cursor()

# # 테이블 생성
# cursor.execute("""DROP TABLE IF EXISTS info""")

# cursor.execute("""
#     CREATE TABLE info (
#     no INCREMENT PRIMARY KEY AUTOINCREMENT,
#     name TEXT(20) NOT NULL,
#     age INCREMENT CHECK (1 < age AND age < 120),
#     btype TEXT(2),
#     birth TEXT
# );
# """)

# # create 함수
# def create_info(name, age, btype, birth):
#     cursor.execute("INSERT INTO info (name, age, btype, birth) VALUES(?, ?, ?, ?)", (name, age, btype, birth))
#     conn.commit()
#     print("New row added.")

# # read 함수 - 모든 자료
# def read_info():
#     cursor.execute("SELECT * FROM info")
#     return cursor.fetchall()

# # read 함수 - 입력 번호와 일치하는 자료
# def read_info_no(no):
#     cursor.execute("SELECT * FROM info WHERE no = ?", (no,))
#     return cursor.fetchall()

# # read 함수 - 이름과 일치하는 자료 
# def read_info_name(name):
#     cursor.execute("SELECT * FROM info WHERE name = ?", (name,))
#     return cursor.fetchall()

# # update 함수
# def update_info(no, name, age, btype, birth):
#     cursor.execute("UPDATE info SET name=?, age=?, btype=?, birth=? WHERE no=?", (name, age, btype, birth, no))
#     conn.commit()
#     print(f"Row with No = {no} updated.")

# # delete 함수
# def delete_info(no):
#     cursor.execute("DELETE FROM info WHERE no=?", (no,))
#     conn.commit()
#     print(f"Row with No = {no} deleted.")



# # 데이터 추가
# create_info('John', 30, 'A', '1993-01-01')

# # 데이터 조회
# rows = read_info()
# for row in rows:
#     print(row)

# # 데이터 수정
# update_info(1, 'Jane', 25, 'B', '1998-02-01')

# # 수정된 데이터 조회
# print(read_info_name('Jane'))

# # 데이터 삭제
# delete_info(1)

# # 삭제된 데이터 조회
# print(read_info_no(1))

# # cursor, conn 연결 닫기
# cursor.close()
# conn.close()






실습2.py



import sqlite3
# 실습 8)
# 하나의 Row를 표현하기 위한 클래스
# VO (Value Object): 값을 표현하는 클래스
# DTO (Data Transfer OBject): 레이어 간 데이터 전송을 위해 정의하는 클래스

class InfoVO:
    def __init__ (self, no=None, name=None, age=None, btype=None, birth=None):
        self.no = no
        self.name = name
        self.age = age
        self.btype = btype
        self.birth = birth

    def __str__ (self):
        return f"InfoVO (no = {self.no}, name = {self.name}, age = {self.age}, btype = {self.btype}, birth = {self.birth})"
    

# DAO (Data Access Object): 데이터베이스에 접근하여 조작하는 기능을 정의한 클래스

class InfoDAO:
    def __init__(self, conn):
        self.conn = conn
        self.cursor = conn.cursor()

    def create(self, vo):
        self.cursor.execute("INSERT INTO info (name, age, btype, birth) VALUES (?, ?, ?, ?)", (vo.name, vo.age, vo.btype, vo.birth))
        self.conn.commit()
        print("New row added.")

    def read_all(self):
        self.cursor.execute("SELECT * FROM info")
        rows = self.cursor.fetchall()
        result = []
        for row in rows:
            vo = InfoVO(*row)
            result.append(vo)
        return result

    def read_by_no(self, no):
        self.cursor.execute("SELECT * FROM info WHERE no=?", (no,))
        row = self.cursor.fetchone()
        if row:
            vo = InfoVO(*row)
            return vo
        else:
            return None
    
    def read_by_name(self, name):
        self.cursor.execute("SELECT * FROM info WHERE name=?", (name,))
        rows = self.cursor.fetchall()
        result = []
        for row in rows:
            vo = InfoVO(*row)
            result.append(vo)
        return result
            
    def update(self, vo):
        self.cursor.execute("UPDATE info SET name=?, age=?, btype=?, birth=?", (vo.name, vo.age, vo.btype, vo.birth))
        self.conn.commit()
        print(f"Row with No = {vo.no} updated.")

    def delete(self, no):
        self.cursor.execute("DELETE FROM info WHERE no=?", (no,))
        self.conn.commit()
        print(f"Row with No = {no} deleted.")


# 데이터베이스 연결
conn = sqlite3.connect("파이썬/Day20/example.db")

# cursor 생성
cursor = conn.cursor()

# 테이블 생성
cursor.execute("""DROP TABLE IF EXISTS info""")

cursor.execute("""
    CREATE TABLE info(
    no INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT(20) NOT NULL,
    age INTEGER CHECK (1 < age AND age < 120),
    btype TEXT(2),
    birth TEXT
);
""")


dao = InfoDAO(conn)

# 데이터 추가
dao.create(InfoVO(1, 'John', 30, 'A', '1993-01-01'))

# 데이터 조회
rows = dao.read_all()
for row in rows:
    print(row)

# 데이터 수정
dao.update(InfoVO(1, 'Jane', 25, 'B', '1998-02-01'))

# 수정된 데이터 조회
rows = dao.read_by_name('Jane')
for row in rows:
    print(row)

# 데이터 삭제
dao.delete(1)

# 삭제된 데이터 조회
print(dao.read_by_no(1))


cursor.close()
conn.close()























