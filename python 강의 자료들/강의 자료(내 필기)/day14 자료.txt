exam.py



"""
# OOP (Object Oriented Programing) & Class
#   객체지향 프로그래밍  &  Class

절차지향(구조적) ->  객체지향
ex) C 언어      ->  C++, Java

< Class >
- Class란 객체를 정의해 놓은 설계도 (속성 - 변수, 기능 - 함수)
- 객체생성( = 인스턴스화)
- 원형: class 클래스이름(상속 클래스명):
            <클래스 변수 1>
            <클래스 변수 2>
            ...
            def 클래스함수1(self[, 인수1, 인수2,,,]):
                <수행할 문장 1>
                <수행할 문장 2> 

                    
- 용어: 캡슐화(은닉), 추상화, 다형성, 상속성
- print(dir(p1)) - p1. 으로 접근 가능한 자료 확인 가능


Class의 변수
- 클래스 변수: 하나의 클래스로 만들어지는 모든 객체가 공유하는 변수
- 객체 변수(self 사용): 객체가 생성될 때 마다 만들어지는 각 객체가 별도로 가지는 변수


Class의 함수와 메서드
- 일반 함수: 클래스에 속하지 않은 함수
- 인스턴스 메서드: 객체 생성 후 객체 참조를 통해 호출 가능한 메서도
                  self 변수를 통해 메서드 호출 객체를 구분하여 객체 변수를 활용
- 클래스 메서드: 클래스 이름을 통해 호출 가능한 메서드
  (@classmethod)   cls를 통해 호출 시 클래스 정보를 전달하여 클래스 변수를 활용
- 스태틱 메서드: 클래스에 속해 있으나 self 가 없는 메서드
  (@staticmethod)  일반 함수를 클래스 멤버인 것 처럼 활용하기 위한 용도


Class의 구성 요소
1) self
- 클래스의 모든 인스턴스 메서드의 첫 번째 인자
- 인스턴스 메서드를 호출한 객체를 참조하는 역할 (인스턴스 생성할 때마다 객체 변수 생성)
- 객체가 인스턴스 메서드를 호출하면 해당 객체의 변수를 참조하기 위해 필요

2) __init__ (생성자)
- 생성자: 하나의 클래스에 __init__ 이름으로 하나만 가질 수 있다
         객체를 생성할 때 객체변수(멤버변수)의 초기값 설정에 활용
- 생성자 오버로딩: __init__ 메서드에 기본인수를 적용하여 비슷하게 구현
                 가변인자와 type(n)등을 활용하여 유연한 생성자 정의 가능

3) __del__ (소멸자)                


"""











실습.py


# OPP & Class

# # Q1. TV클래스를 정의하시오. (전원을 숫자 홀,짝으로 구분)   =>  Q1.1 방식으로!!

# class TV:

#     def __init__(self, brand, power = None, ch = None, vol = None):     # 생성자

#         self.brand = brand
#         self.ch = 0
#         self.vol = 0
#         self.power = 0

#         if power == None:               # 생성자 오버 로딩
#             self.power = 0
#         elif int(power) % 2 == 0:
#             self.power = 0
#         elif int(power) % 2 == 1:
#             self.power = 1

#         if ch == None:              
#             self.ch = 0
#         elif type(ch) == int:
#             self.ch = ch
#         else:
#             self.ch = 0

#         if vol == None:
#             self.vol = 0
#         elif type(vol) == int:
#             self.vol = vol
#         else:
#             self.vol = 0

#     def powerOnOff(self):
#         self.power += 1

#     def chUp(self):
#         self.ch += 1

#     def volUP(self):
#         self.vol += 1

#     def display(self):
#         print("="*15)
#         print(f"{self.brand} TV")

#         if self.power % 2 == 0:
#             print("전원 꺼짐")
#             print("="*15)
#             print()
#         else:
#             print("~"*8)
#             print(f"ch: {self.ch}")
#             print(f"vol: {self.vol}")
#             print("방송 중")
#             print("~"*8)
#             print("="*15)
#             print()

# tv1 = TV("삼성")
# tv2 = TV("엘지", 11, 15, 10)

# tv1.display()
# tv2.display()

# tv1.powerOnOff()
# tv1.display()
# tv2.display()

# tv1.chUp()
# tv1.volUP()
# tv1.display()



# # Q1-1. TV클래스를 정의하시오. (전원을 False,True 로 반전시키며 구분)

# class TV:

#     def __init__(self, brand, power = None, ch = None, vol = None):     # 생성자

#         self.brand = brand
#         self.ch = 0
#         self.vol = 0
#         self.power = False

#         if power == None:
#             self.power = False
#         elif power == "on":
#             self.power = True
#         elif power == "off":
#             self.power = False

#         if ch == None:              
#             self.ch = 0
#         elif type(ch) == int:
#             self.ch = ch
#         else:
#             self.ch = 0

#         if vol == None:
#             self.vol = 0
#         elif type(vol) == int:
#             self.vol = vol
#         else:
#             self.vol = 0


#     def powerOnOff(self):
#         if self.power == False:
#             self.power = True
#         else:
#             self.power = False
#         self.display()              # 전원 끄고 킨 결과 바로 출력하여 확인

#     def chUp(self):
#         self.ch += 1
#         self.display()              # 채널 올린 결과 바로 출력하여 확인

#     def volUP(self):
#         self.vol += 1
#         self.display()              # 볼륨 올린 결과 바로 출력하여 확인

#     def display(self):
#         print("="*15)
#         print(f"{self.brand} TV")

#         if self.power == True:
#             print("~"*8)
#             print(f"ch: {self.ch}")
#             print(f"vol: {self.vol}")
#             print("방송 중")
#             print("~"*8)
#             print("="*15)
#             print()
#         elif self.power == False:
#             print("전원 꺼짐")
#             print("="*15)
#             print()


# tv1 = TV("삼성")
# tv2 = TV("엘지", "on", 15, 10)

# tv1.display()
# tv2.display()

# tv1.powerOnOff()
# tv1.display()
# tv2.display()

# tv1.chUp()
# tv1.volUP()





# Q2. 앞서 만든 TV 클래스를 사용하는 리모컨을 직접 정의해보기
# 리모컨의 기능과 속성을 생각하여 분류
# ex) 속성: TV를 참조해야 한다는 것을 이해
#     기능: 전원, 채널변경, 볼륨변경 등
# 리모컨의 속성(값)은 변수로, 기능은 멤버 메소드로 정의
# 작성 후 객체를 생성하여 기능 테스트.  리모컨이 TV를 사용한다는 것을 표현하는 것

class TV:

    def __init__(self, brand, ch = None, vol = None, power = None):     # 생성자

        self.brand = brand
        self.ch = 0
        self.vol = 0
        self.power = False

        if power == None:                   # 생성자 오버 로딩
            self.power = False
        elif power == "on":
            self.power = True
        elif power == "off":
            self.power = False

        if ch == None:              
            self.ch = 0
        elif type(ch) == int:
            self.ch = ch
        else:
            self.ch = 0

        if vol == None:
            self.vol = 0
        elif type(vol) == int:
            self.vol = vol
        else:
            self.vol = 0

    def powerOnOff(self):
        if self.power == False:
            self.power = True
        else:
            self.power = False
        self.display()             

    def chUp(self):
        self.ch += 1
        self.display()            

    def volUp(self):
        self.vol += 1
        self.display()              

    def display(self):
        print("="*15)
        print(f"{self.brand} TV")

        if self.power == True:
            print("~"*8)
            print(f"ch: {self.ch}")
            print(f"vol: {self.vol}")
            print("방송 중")
            print("~"*8)
            print("="*15)
            print()
        elif self.power == False:
            print("전원 꺼짐")
            print("="*15)
            print()


class Remocon:

    def __init__ (self, tv):
        self.tv = tv

    def remoconPower(self):
        self.tv.powerOnOff()

    def remoconChUp(self):
        self.tv.chUp()
 
    def remoconVolUp(self):
        self.tv.volUp()

    def remoconDisplay(self):
        self.tv.display()


tv1 = TV("삼성")
tv2 = TV("엘지")

remocon1 = Remocon(tv1)
remocon2 = Remocon(tv2)

remocon1.remoconDisplay()
remocon2.remoconDisplay()

remocon1.remoconPower()
remocon1.remoconChUp()
remocon1.remoconVolUp()
remocon1.remoconPower()

remocon2.remoconPower()
remocon2.remoconChUp()
remocon2.remoconChUp()
remocon2.remoconVolUp()




