exam01.py


# 함수

# ## 함수 형태
# # 함수 형태 - 인자와 반환이 없는 함수
# def func1():
#     print('기능 동작')

# func1()
# print()

# # 함수 형태 - 인자는 있고 반환이 없는 함수
# def func2(n):
#     print(f'{n}으로 기능 동작')
# func2(1)
# print()

# # 함수 형태 - 인자는 없고 반환이 있는 함수
# def func3():
#     print('기능 동작')
#     return 10

# result = func3()
# print(result)
# print()

# # 함수 형태 - 인자와 반환이 있는 함수
# def func4(n1, n2):
#     return n1 + n2

# result = func4(10, 20)
# print(result)
# print()

# # 함수 형태 - 디폴트 매개변수
# def func5(n1=10, n2=20):
#     return n1 + n2

# print(func5())
# print(func5(100))
# print(func5(100, 200))
# print()

# # 일반 매개변수와 같이 활용
# #def func(name='noname', age): # 디폴트 값이 지정된 매개변수 다음에 일반 매개변수 선언 불가
# def func(age, name='noname'):
#     print(name)
#     print(age)

# func('Hong', 20)
# func(20)
# #func() 오류(age에 전달될 인자가 없으므로)

# # Packing/Unpacking
# fruits = ["apple", "banana", "cherry"]

# fruit1, fruit2, fruit3 = fruits
# print(fruit1)  
# print(fruit2)  
# print(fruit3)  

# numbers = [1, 2, 3, 4, 5]

# first, *middle, last = numbers 
# print(first)  
# print(middle) 
# print(last)   

# # 함수 형태 - 가변 인자(튜플)
# def sum(*args):
#     result = 0
#     for num in args:
#         result += num
#     return result

# print(sum(1,2,3))
# print(sum(1,2,3,4,5))
# values = [1,2,3,4,5]
# #print(sum(values)) # 오류
# print(sum(*values)) # Unpacking하여 전달

# print()

# #가변인자 일반인자 디폴트 매개변수 모두 적용
# def func(*args, n, s='de'):
#     print(f'n:{n}')
#     print(f's:{s}')
#     for ar in args:
#         print(ar)
#     print()

# func(1,2,3, n=10)
# func('hello', 'hi', n=20)
# a = ['a', 2, 'b', 3]
# func(a, 'A', n=30)
# #func(a) # n에 들어갈 인자가 없음 func() missing 1 required positional argument: 'n'



# # 함수 형태 - 키워드 인자
# def print_person_info1(name, age, city):
#     print("이름:", name)
#     print("나이:", age)
#     print("도시:", city)

# print_person_info1(age=20, city='서울', name='홍길동')
# print()

# # 함수 형태 - 가변 키워드 인자(딕셔너리)
# def print_person_info2(**kwargs):
#     print(kwargs)
#     print("이름:", kwargs['name'])
#     print("나이:", kwargs.get('age'))
#     print("도시:", kwargs['city'])

# print_person_info2(name='홍길동', age=20, city='서울')
# values = {'name':'홍길동', 'age':20, 'city':'서울'}
# #print_person_info2(k=values) # 오류 k=values와 같이 전달 필요
# print_person_info2(**values) # Unpacking하여 전달
# print()

# # 가변 키워드 인자를 받는 함수에서 packing/unpacking 사용
# def func(caller='Caller', **kargs):
#     keys = kargs.keys()
#     i = 0
#     for key in keys:
#         print(f'[{caller}]: {i}번째 인자{key}: {kargs[key]}')
#         i += 1
#     print()

# func(caller='홍', a=10)
# func(a=1, b=2, c=3)
# func(a='hello', b='hi')
# func(a=['1', '2', 3], b=(1, 2, 3), caller='박')
# values = {
#     'a':['1', '2', 3], 
#     'b':(1, 2, 3)
# }
# func(**values, caller='박')
# func(caller='최', **values)




# 가변 인자
# 1) 
# *가변 매개변수  => 자료 형태: 튜플
#    원형: def value(*args):          ==> packing (여러개의 값을 하나로 받음) 
#             print(args)                              
#
#         value("hello", "hi")      =>   ("hello", "hi")
#         value(1,2,3,4,5)          =>   (1,2,3,4,5)
#
#  만약 자료형이 리스트일 경우          ==> unpacking(*li) (여러개의 값을 가지고 있는 객체를 풀어줌)
#  li = [1,2,3,4,5]
#         value(li)       =>   ([1,2,3,4,5],)      
#  각각의 자료에 접근하기 위해서는 (*li)를 사용한다.  
#         value(*li)      =>   (1,2,3,4,5)          
#
# 2) 
# **가변 매개변수  => 자료 형태: 딕셔너리
#    원형: def value(**args):         ==> packing (여러개의 값을 하나로 받음)
#             print(args)                             
#    ex) def value(**args):
#           print(args)
#
#        value(a=1, b=2, c=3)        =>  {"a" : 1, "b" : 2, "C" : 3}
#        value(a={1:1}, b={2:2})     =>  {"a" : {1:1}, "b" : {2:2}}
#
#  만약 자료형이 묶여있을 경우          ==> unpacking(*alp) (여러개의 값을 가지고 있는 객체를 풀어줌)
#  alp = {'a': 1, 'b': 2, 'c': 3}
#        value(va = alp)      =>  {"va" : {'a': 1, 'b': 2, 'c': 3}}   
#                                     key값과 value 값이 원하는 대로 매칭 안됨.
#        value(**alp)         =>  {'a': 1, 'b': 2, 'c': 3}


# 함수 인수에 초기값 지정
# 원형: def func(name = "noname", age = 0):
#           print(name)
#           print(age)
#      func()                =>   (noname, 0)
#      func("Lee", 20)       =>   ("Lee", 20)
#
# ※주의사항 : 왼쪽의 값에는 초기값이 지정 되어있지 않아도 괜찮으나,
#             오른쪽의 값에는 반드시 초기값이 지정 되어있어야 한다.
#             ex) def func(name, age = 0):           - O
#                 def func(name = "noname", age):    - X





exam02.py


# mutable (변경 가능한)
# - 리스트, 딕셔너리 타입은 변경 가능 
# ex) def func(a):
#       a[0] = "HELLO"
#
#   a = ["hello", "hi"]
#   print(a)    => ["hello", "hi"]
#   func(a)
#   print(a)    => ["HELLO", "hi"]
#
#
# immutable (변경 불가능한)
# - 튜플, 기본 데이터 타입은 변경 불가능
# ex) def func(a):
#       a = "HELLO"
#       print("func: ", a)
#
#   a = "hello"
#   func(a)     => "HELLO"
#   print(a)    => "hello"





실습.py


# # 함수

# # Q1. 숫자를 입력 받아 음수를 판별하는 함수 정의

# def 음수(x):
#     if x < 0:
#         return "음수"
#     return "양수"

# num = int(input("수 입력: "))
# print(f"{num}는(은) {음수(num)}입니다")


# # Q2. 태어난 년도를 2자리로 입력하여 나이를 구하는 함수 정의

# def 나이(x):
#     if x <= 23:
#         return 23 - x + 1
#     elif 23 < x < 100: 
#         return 123 - x + 1
    
# year = int(input("태어난 년도(2자리) 입력: "))
# print(f"나이는 {나이(year)}살")


# # Q3. 태어난 년도를 2자리 혹은 4자리로 입력받아 우리나라 나이를 반환하는 함수 정의

# def 나이2(x):
#     if 0 <= x < 100:
#         if x <= 23:
#             return 23 - x + 1
#         else:
#             return 123 - x + 1
#     else:
#         return 2023 - x + 1
    
# year2 = int(input("태어난 년도 입력(2자리 or 4자리): "))
# print(f"나이는 {나이2(year2)}살")


# # Q4. 숫자를 입력 받아 절대값을 반환하는 함수 정의

# def 절대값(x):
#     if x < 0:
#         return -x
#     else:
#         return x
    
# n = int(input("숫자 입력: "))
# print(f"{n}의 절대값은 {절대값(n)}")


# # Q5. 1부터 입력한 수 까지의 합을 반환하는 함수정의

# def 합(x):
#     hap = 0
#     for i in range(1,x+1):
#         hap += i
#     return hap

# su = int(input("수 입력: "))
# print(f"1부터 {su}까지의 합은 {합(su)}")


# # Q6. 수를 입력 받아 1부터 입력한 수 사이의 2의 배수들의 합을 반환해주는 함수 정의

# def 이배수(x):
#     hap = 0
#     for i in range(1,x):
#         if i % 2 == 0:
#             hap += i
#     return hap

# sut = int(input("수 입력: "))
# print(f"1부터 {sut}사이 2의 배수들의 합은 {이배수(sut)}")


# # Q7. 표준체중을 반환하는 함수를 정의하고, 비만도를 반환하는 함수를 정의

# def 표준체중(x):
#     return round((x - 100) * 0.9, 2)
    
# def 비만도(y):
#     y = round((weight / 표준체중(height)) * 100, 2)
    
#     if y < 80:
#         return f"{y}, 저체중"
#     elif y < 90:
#         return f"{y}, 경한 저체중"
#     elif y < 110:
#         return f"{y}, 정상체중"
#     elif y < 120:
#         return f"{y}, 과체중"
#     elif y < 130:
#         return f"{y}, 경도비만"
#     elif y < 150:
#         return f"{y}, 중증도비만"
#     elif y < 200:
#         return f"{y}, 고도비만"
#     else:
#         return f"{y}, 위험한 비만"

# height = float(input("현재 신장 입력(cm): "))
# weight = float(input("현재 체중 입력(kg): "))

# print(f"표준체중: {표준체중(height)}")
# print(f"비만도는 {비만도(weight)}")





실습2.py

# 함수

# Q1. 임의의 개수로 실수를 입력 받아 최소값과 최대값을 제외한 나머지 점수들의 합계를 
#     반환하는 함수를 정의 (단, 가변인자를 활용)

def add(*su):
    hap = 0
    max = 0
    min = 100

    for i in su:
        if i > max:
            max = i
        if i < min:
            min = i
        hap += i
    return hap - (max + min)

li = []
for i in range(int(input("입력할 수의 개수? "))):
    li.append(float(input("실수 입력: ")))

print(f"최대값, 최소값을 제외한 수들의 합은 {add(*li)}")


# Q2. 합계에 해당하는 값과 개수를 입력 받아 평균을 반환하는 함수 정의

def avg(x, y):
    return x / y

result = add(*li)
su = int(input("입력한 수의 개수: "))

print(f"평균은 {avg(result, su)}")


# Q3. cm값을 inch 값으로 반환하는 함수 정의 (1 inch == 2.54cm)

def inch(x):
    return round(x / 2.54, 5)

su = int(input("cm 입력: "))
print(f"{su}cm는 {inch(su)}inch")


# Q4. 파일의 용량(byte)을 매개변수로 입력 받아 bit단위로 반환하는 함수 정의
#     파일의 용량을 입력할 때 단위도 입력한다.(G, M, K)
#     ex) byteToBit(32, "G")   byteToBit(64, "M")

def bit(x, y):
    if y == "G" or y == "g":
        return int(x) * (8.5899e+9)
    elif y == "M" or y == "m":
        return int(x) * (8,388,608)
    elif y == "K" or y == "k":
        return int(x) * 8,192
    
file, file2 = input("파일의 용량, 단위 입력: ").split(",")
print(f"{file}{file2}는 {bit(file, file2)}bit")


# Q5. 인자로 N을 전달하면 N에 대한 팩토리얼을 반환해주는 함수 정의

def 팩토(N):
    su = 1
    for i in range(1,N+1):
        su *= i
    return su

N = int(input("수 입력: "))
print(f"{N}의 팩토리얼 값은 {팩토(N)}")


# Q6. 인자로 N을 전달하면 거꾸로 만든 수를 반환하는 함수 정의

def 거꾸로(N):
    result = 0
    while True:
        result += N % 10
        N = N // 10

        if N == 0:
            break
        result *= 10
    return result

N = int(input("수 입력: "))
print(f"{N}을 거꾸로 하면 {거꾸로(N)}")
