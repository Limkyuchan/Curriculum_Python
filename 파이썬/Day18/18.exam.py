
# OOP & class

"""
< 다중 상속 >
- 여러 클래스를 상속
- 다양하게 상속을 활용할 수 있음


< isinstance 함수 >
- 객체 타입 확인
- 참조하는 객체가 해당 클래스로 만들어진 것인지 판별(True/False)
- 원형: isinstance(객체참조이름(변수), 클래스)


< 클래스의 관계 표현 >
1) is - a 관계 (상속을 통해 표현)
- 한 클래스가 다른 클래스의 하위 클래스임을 나타냄
- 하위 클래스는 상위 클래스의 모든 속성과 메서드를 상속받음
- 이 관계는 일반적으로 "A는 B의 종류다" 라는 형태로 설명
- ex) "강아지" 클래스가 "동물" 클래스의 하위 클래스라면, 
      "강아지는 동물의 종류이다" 라고 할 수 있다.

2) has - a 관계 (포함하는 관계)
- 한 클래스의 객체가 다른 클래스의 객체를 속성으로 포함하고 있는 경우를 나타냄
- 이 관계는 일반적으로 "A는 B를 가지고 있다"라는 형태로 설명
- ex) "자동차" 클래스가 "엔진" 클래스의 객체를 속성으로 가진다면,
      "자동차는 엔진을 가지고 있다" 라고 할 수 있다.
"""



# Module & Package

"""  package 폴더, 강사님 자료 참고

< package > 
- __init__.py 파일이 있어야 해당 폴더를 파이썬에서 패키지라고 인식한다.


특정 패키지의 모듈이 다른 패키지의 모듈을 포함하는 형태
- .. : 상위 패키지
- . : 현재 패키지

"""



# Exception (예외)
"""
< Exception(예외) >
- 프로그램 동작 중 문제가 발생되는 것을 예외라고 한다.
- 파이썬 인터프리터가 처리 중 에러가 나면 메시지를 출력하고 종료됨.
- 에러를 무시하고 진행하거나 다른 방법으로 처리되도록 핸들링 가능(예외 처리)
- 예외 처리 기법 작성방법 3가지:
  1) try영역에서 발생되는 모든 예외를 except 에서 처리
      try:
         (예외가 발생할 수 있는 코드가 있는 영역(지역변수 선언 주의))
      except:
         (발생된 예외를 처리하는 코드를 작성하는 영역)

  2) try영역에서 발생되는 예외 중 특정 예외만 선택하여 except에서 처리
      try:
         ret = 4 / 0
      except ZeroDivisionError:                       # 특정 예외만 선택
         print("정수를 0으로 나눌 수 없음")

  3) try영역에서 발생되는 특정 예외에 대해 메시지까지 확인하여 except에서 처리
      try:
         re = 4 / 0
      except ZeroDivisionError as msg:                # as 활용하여 별칭
         print("예외: ", msg)

- try ~ else: else는 try영역에서 예외가 발생되지 않으면 실행되는 영역
              반드시 except: 뒤에 작성
      
- try ~ finally: finally는 예외가 발생 여부와 관계없이 무조건 실행되는 영역
                 except: 없이 try 뒤에 작성 가능,  except:가 있다면 뒤에 작성
      ★ finally : 자원을 해제하는 용도로 주로 활용
         ex) 파일 입출력에서 close() 같은 코드를 주로 작성

- pass구문: 아무것도 수행하지 않는다. 예외를 식별할 수 없기 때문에 pass사용은 비추.
- raise 구문으로 직접 예외를 발생시킬 수 있다.
- 예외 클래스 작성하기: 모든 예외 처리 class는 Exception을 참조해야함.
                      내가 class로 예외 클래스 작성 시 Exception 을 반드시 상속받게 만들어야 한다.
"""

