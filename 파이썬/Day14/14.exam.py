
"""
# OOP (Object Oriented Programing) & Class
#   객체지향 프로그래밍  &  Class

절차지향(구조적) ->  객체지향
ex) C 언어      ->  C++, Java

< Class >
- Class란 객체를 정의해 놓은 설계도 (속성 - 변수, 기능 - 함수)
- 객체생성( = 인스턴스화)
- 원형: class 클래스이름(상속 클래스명):
            <클래스 변수 1>
            <클래스 변수 2>
            ...
            def 클래스함수1(self[, 인수1, 인수2,,,]):
                <수행할 문장 1>
                <수행할 문장 2> 

                    
- 용어: 캡슐화(은닉), 추상화, 다형성, 상속성
- print(dir(p1)) - p1. 으로 접근 가능한 자료 확인 가능


Class의 변수
- 클래스 변수: 하나의 클래스로 만들어지는 모든 객체가 공유하는 변수
- 객체 변수(self 사용): 객체가 생성될 때 마다 만들어지는 각 객체가 별도로 가지는 변수


Class의 함수와 메서드
- 일반 함수: 클래스에 속하지 않은 함수
- 인스턴스 메서드: 객체 생성 후 객체 참조를 통해 호출 가능한 메서도
                  self 변수를 통해 메서드 호출 객체를 구분하여 객체 변수를 활용
- 클래스 메서드: 클래스 이름을 통해 호출 가능한 메서드
  (@classmethod)   cls를 통해 호출 시 클래스 정보를 전달하여 클래스 변수를 활용
- 스태틱 메서드: 클래스에 속해 있으나 self 가 없는 메서드
  (@staticmethod)  일반 함수를 클래스 멤버인 것 처럼 활용하기 위한 용도


Class의 구성 요소
1) self
- 클래스의 모든 인스턴스 메서드의 첫 번째 인자
- 인스턴스 메서드를 호출한 객체를 참조하는 역할 (인스턴스 생성할 때마다 객체 변수 생성)
- 객체가 인스턴스 메서드를 호출하면 해당 객체의 변수를 참조하기 위해 필요

2) __init__ (생성자)
- 생성자: 하나의 클래스에 __init__ 이름으로 하나만 가질 수 있다
         객체를 생성할 때 객체변수(멤버변수)의 초기값 설정에 활용
- 생성자 오버로딩: __init__ 메서드에 기본인수를 적용하여 비슷하게 구현
                 가변인자와 type(n)등을 활용하여 유연한 생성자 정의 가능

3) __del__ (소멸자)                


"""


